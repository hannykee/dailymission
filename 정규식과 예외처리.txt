20180103

예외처리
#에러가 발생 했을 경우 방향을 지정해주는 것


try:
    에러가 발생할 문장
except 예외처리 종류:
    에러가 발생하면 실행할 문장

try:
    num=int(input("숫자를 입력하세요:"))
except (ValueError, ZeroDivisionError):
    print("숫자가 아니네요. 숫자를 입력하세요.")



try:

    no1=int(input("숫자를 입력하세요"))
    no2=int(input("숫자를 입력하세요"))
    no3=no1/no2
    print(no3)
except ValueError:
    print("숫자가 아니네요. 숫자를 입력하세요.")
except ZeroDivisionError:
    print("0으로 나눌 순 없어요.")

#else:에 넣으면 예외 처리/ 정상처리 모두 인쇄 가능


#finally:는 정상처리든 아니든 프로그램에서 정리할 때 무조건 보여줌
    #프로그램 진행 중에 메모리 정리 등 (최종적으로 모든 정리를 하고 마무리)

#거의 대부분 try~except~finally(프로그램 종료 후 시스템이 수행할 정리작업)
  

try:
    num=int(input("숫자를 입력하세요"))
except ValueError:      #정상이 아닐 경우 출력문
    print("숫자가 아닙니다.")
else:   #정상일 경우 출력문
    print(num)
finally:
    print("finally는 무조건 실행됩니다.")



try:
    num=int(input("숫자를 입력하세요"))
    raise ValueError("0보다 작아요","0이예요","0보다 커요")
except ValueError as e:
    if num <0 :
        print(e.args[0])
    if num==0:
        print(e.args[1])
    if num > 0 :
        print(e.args[2])

#valueError가 일어났을 때 T/F 값이 아니라 결과값이 나온다. 
#세개의 값이 raise를 통해 넘어온다.
내가 직접 에러 발생 시의 메세지를 처리할 수 있다. 
메세지를 넘겨받아 사용한다.
#객체지향 프로그램


KeyError (키보드로 인한 에러)
ZeroDivisionsError
FileNotFoundError


정규식 : 다음 문자열에서 정수 정수/실수를 표현하는 단어만 추출하라

정규식이란 문자열 패턴의 검색, 추출, 대치 규칙을 정의함
ㄴ 파이썬 정규식 모듈 -re

